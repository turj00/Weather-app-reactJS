{"version":3,"sources":["app_components/weather.component.jsx","app_components/form.component.jsx","app_components/Currenttime.jsx","App.js","serviceWorker.js","index.js"],"names":["Weather","props","className","city","weatherIcon","temp_celsius","min","max","minmaxTemp","temp_min","temp_max","description","Form","error","role","onSubmit","loadweather","type","name","autoComplete","placeholder","Currenttime","state","date","Date","setInterval","setState","this","toLocaleTimeString","callMe","Component","App","getWeather","e","a","preventDefault","target","elements","value","country","fetch","api_call","json","response","console","log","sys","celsius","calCelsius","main","temp","weather","get_WeatherIcon","id","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","rangeid","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.ea452610.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nconst Weather=(props) =>{\r\n\r\n    return (\r\n\r\n        <div className=\"container\">\r\n\r\n\r\n\r\n            <div className=\"cards pt-4\">\r\n                <h1> {props.city} </h1>\r\n                <h5 className=\"py-4\">\r\n\r\n                {/* learn the i tag's classname way */}\r\n                <i className={`wi ${props.weatherIcon} display-1`}/>\r\n\r\n            </h5> \r\n \r\n             {props.temp_celsius ?(\r\n\r\n            <h1 className= 'py-2'>{props.temp_celsius}&deg; </h1>): null} \r\n\r\n        \r\n                    \r\n            {minmaxTemp(props.temp_min,props.temp_max)}\r\n\r\n            <h4 className=\"py-3\"> {props.description} </h4>\r\n\r\n\r\n            </div> \r\n\r\n        </div>\r\n\r\n\r\n    )\r\n\r\n\r\n\r\n\r\n}\r\n\r\nfunction minmaxTemp(min,max){\r\n\r\n    if(min && max){\r\n\r\n        return(\r\n\r\n            <h3>\r\n\r\n             <span className=\"px-4\">Min. temp: {min}&deg; </span>\r\n             <span className=\"px-4\">Max. temp: {max}&deg; </span>\r\n\r\n            </h3>\r\n\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default Weather","import React from 'react';\r\nimport \"./form.style.css\";\r\n\r\n\r\nconst Form = props => {\r\n\r\n    return(\r\n\r\n        \r\n        <div className=\"container\">\r\n\r\n    <div>{props.error ? error() : null}</div>\r\n\r\n            <form onSubmit={props.loadweather}>\r\n                <div className=\"row\">\r\n\r\n                    <div className=\"col-md-3 offset-md-2\">\r\n\r\n                        <input type=\"text\" className=\"form-control\" name =\"city\" autoComplete=\"off \" placeholder=\"Country\"></input>\r\n\r\n                    </div>\r\n\r\n                    <div className=\"col-md-3\">\r\n\r\n                        <input type=\"text\" className=\"form-control\" name =\"country\" autoComplete=\"off\" placeholder=\"City\"></input>\r\n                    </div>\r\n\r\n                    <div className=\"col-md-3 mt-md-0 text-md-left\">\r\n\r\n                        <button className=\"btn btn-warning\">Get Weather</button>\r\n\r\n                    </div>\r\n\r\n\r\n\r\n                </div>\r\n            </form>\r\n\r\n\r\n        </div>\r\n\r\n\r\n\r\n    )\r\n\r\n\r\n\r\n\r\n}\r\n\r\nfunction error(){\r\n\r\n    return (\r\n\r\n        <div className=\"alert alert-danger mx-5\" role=\"alert\">\r\n\r\n            Please Enter City and Country\r\n\r\n        </div>\r\n\r\n\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default Form;","import React, { Component } from 'react'\r\n\r\nexport class Currenttime extends Component {\r\n\r\n\r\n    state={\r\n\r\n        date: new Date(),\r\n\r\n\r\n    }\r\n    callMe(){\r\n\r\n        setInterval(() => {\r\n\r\n\r\n           this.setState({date: new Date()})\r\n\r\n        }, 1000)\r\n\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>Current local time: </h2>\r\n                <h2 className=\"currentTime\">{this.state.date.toLocaleTimeString()}</h2>\r\n                {this.callMe()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Currenttime\r\n","import React from 'react';\n\nimport './App.css';\n\nimport Weather from \"./app_components/weather.component\";\n\nimport \"weather-icons/css/weather-icons.css\"\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Form from './app_components/form.component';\n\nimport Currentime from \"./app_components/Currenttime\"\n\nconst API_key =\"c9e5429c90794a932e27e87e773b731a\";\n\nclass App extends React.Component{\n\n    constructor(){\n\n      super();\n      this.state = {\n        city: undefined,\n        country: undefined,\n        icon: undefined,\n        main:undefined,\n        celsius:undefined,\n        temp_max:undefined,\n        temp_min:undefined,\n        description:\"\",\n        error: false\n      };\n      \n      //this.getWeather();\n\n      this.weatherIcon = {\n\n        Thunderstorm: \"wi-thunderstorm\",\n        Drizzle: \"wi-sleet\",\n        Rain:\"wi-storm-showers\",\n        Snow: \"wi-snow\",\n        Atmosphere: \"wi-fog\",\n        Clear: \"wi-day-sunny\",\n        Clouds: \"wi-day-fog\"\n\n      };\n\n    }\n\n    calCelsius(temp){\n\n      let cell = Math.floor(temp -273.15 )\n\n      return cell;\n\n    }\n\n    get_WeatherIcon(icons,rangeid){\n\n      switch(true){\n\n        case rangeid >= 200 && rangeid <=232:\n          this.setState({icon: this.weatherIcon.Thunderstorm});\n          break;\n\n          case rangeid >= 300 && rangeid <=321:\n            this.setState({icon: this.weatherIcon.Drizzle});\n            break;\n\n            case rangeid >= 500 && rangeid <=531:\n              this.setState({icon: this.weatherIcon.Rain});\n              break;\n\n              case rangeid >= 600 && rangeid <=622:\n                this.setState({icon: this.weatherIcon.Snow});\n                break;\n\n                case rangeid >= 701 && rangeid <=781:\n                  this.setState({icon: this.weatherIcon.Atmosphere});\n                  break;\n\n                  case rangeid === 800:\n                    this.setState({icon: this.weatherIcon.Clear});\n                    break;\n\n                    case rangeid >= 801 && rangeid <=804:\n                      this.setState({icon: this.weatherIcon.Clouds});\n                      break;\n\n                      default: this.setState({icon: this.weatherIcon.Clouds});\n\n\n\n      }\n\n\n\n    }\n\n    getWeather = async (e) =>{\n\n      e.preventDefault();\n\n      const city = e.target.elements.city.value;\n      const country = e.target.elements.country.value;\n\n      if(city && country){\n\n        const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_key}`);\n\n        const response = await api_call.json();\n\n        console.log(response);\n  \n        this.setState({\n  \n          city: `${response.name}, ${response.sys.country}`,\n          \n          celsius: this.calCelsius(response.main.temp),\n          temp_max: this.calCelsius(response.main.temp_max),\n          temp_min: this.calCelsius(response.main.temp_min),\n          description: response.weather[0].description,\n          error: false\n          \n          \n  \n        });\n  \n        this.get_WeatherIcon(this.weatherIcon, response.weather[0].id)\n\n\n      }\n      else {\n\n\n        this.setState({ error: true});\n      }\n\n     \n\n\n\n\n    };\n    render () {\n\n      return(\n\n        <div className=\"App\">\n\n          <Currentime />\n\n        <Form loadweather={this.getWeather} error ={this.state.error}/>\n        <Weather \n         city={this.state.city}\n         country={this.state.country}\n         temp_celsius={this.state.celsius}\n         temp_max={this.state.temp_max}\n         temp_min={this.state.temp_min}\n         description={this.state.description}\n         weatherIcon= {this.state.icon}\n         \n         \n         />\n      </div>\n\n\n      )\n\n    }\n\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\n  \n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n\n\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}